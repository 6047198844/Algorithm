function solution(strings, n) {
    let arr = strings.map((str) => str[n]+str);
    arr.sort();
    return arr.map((str) => str.slice(1))
}

// 문제풀이:
// 우선 같은 길이의 배열을 반환한다는 점에서 map함수를 활용 해야겠다고 생각했다. 
// 단, 같은 길이의 배열이지만 요소의 순서가 바뀐다는 조건이 하나가 더 있었다. 
// 그래서 우선 map를 해서 n번째에 해당되는 요소를 먼저 빼고 생각해봤다. 

// 처음엔 map((str,i) => str[n] +i) 로 해서 index를 같이 넘겨주고 이에 맞게 해야하나 
// 싶었는데, 이 또한 2번 일하는 것 같다는 느낌이 들었다. 

// 그러다 조건을 읽으니 같은 문자의 경우 사전순으로 정렬한다고 했다.
// 그래서 str[n]에 원래 str값도 뒤에 붙여서 넘겼고,
// 문자열에 맞게 sort 후 
// 맨 앞 자리의 str[0]만 빼려고 slice()함수를 활용했다. 


// 활용하기 좋은 방법:
// 1. 중간중간에 console.log 로 내가 하는 것이 맞는가 확인할 것
//     console.log(arr);
//     arr.sort();
//     console.log(arr);
//  여기선 이렇게 해서 sort가 제대로 먹는지 확인했다. (문자열은 그냥 sort()해도 괜찮나보다...? 맞나요??? )
//  숫자 sort할 때는 sort((a,b)=> a-b)로 해야 오름차순이 된다. 

// 배운점:
// 오... 진짜 꾸준히 해서 그런지 함수들이 점차 익숙해지고 있는 느낌이 든다! 
// map(), sort(), slice() 함수를 활용했고, 
// slice()의 경우 지난번에 배웠는데 기억이 잘 안났지만, 
// console로 찍어보면서 숫자 하나만 넣으면 해당 인덱스부터 끝까지 자를거 같은 느낌으로 했더니 되었다! ㅎㅎ 